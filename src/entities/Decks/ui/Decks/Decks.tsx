import { Link } from 'react-router-dom'

import { useCreateDeckMutation, useGetDecksQuery } from '@/entities/Decks/services/decks-api'
import { Button } from '@/shared/ui/button'
import { Table, TableBody, TableCell, TableHeadCell, TableRow } from '@/shared/ui/table'
import { nanoid } from '@reduxjs/toolkit'

export const Decks = () => {
    // —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤ result –ª–µ–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ
    const { data, error, isLoading } = useGetDecksQuery({ itemsPerPage: 3, name: 'w' })
    // console.log(data)

    const [createDeck, { isLoading: isCreateLoading }] = useCreateDeckMutation()

    if (isLoading || isCreateLoading) {
        return <h1>Loading...</h1>
    }

    if (error) {
        const err = error as any

        return <h1>{err.data.message}</h1>
    }

    const onCreateDeckClick = () => {
        createDeck({ name: 'title üëå' + nanoid() })
    }

    return (
        <div>
            <Link to={'/news'}>To News</Link>
            <hr />
            <Button onClick={onCreateDeckClick}>Create Deck</Button>
            <Table>
                <TableBody>
                    <TableRow>
                        <TableHeadCell>Name</TableHeadCell>
                        <TableHeadCell>Cards</TableHeadCell>
                        <TableHeadCell>Last Updated</TableHeadCell>
                        <TableHeadCell>Created by</TableHeadCell>
                    </TableRow>
                    {data?.items.map((deck) => {
                        return (
                            <TableRow key={deck.id}>
                                <TableCell>{deck.name}</TableCell>
                                <TableCell>{deck.cardsCount}</TableCell>
                                <TableCell>{deck.updated}</TableCell>
                                <TableCell>{deck.author.name}</TableCell>
                            </TableRow>
                        )
                    })}
                </TableBody>
            </Table>
        </div>
    )
}

/*
–ò—Ç–æ–≥: —Ä–∞–Ω—å—à–µ –º—ã –ø–∏—Å–∞–ª–∏ –≤ —Å–∞–Ω–∫–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –ª–æ–∂–∏–ª–∏ –µ–≥–æ –≤ —Å—Ç–µ–π—Ç —Å—Ç–µ–∏—Ç –º–µ–Ω—è–ª—Å—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å—Ç–µ–∏—Ç –¥–æ—Å—Ç–∞–≤–∞–ª–∏ –Ω–∞ UI –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
–¢–ï–ü–ï–†–¨: –Ω–∞–ø–∏—Å–∞–ª–∏ 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Ö—É–∫ –∏ –ø—Ä–æ—Å—Ç–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –µ–≥–æ –¥–µ—Ä–Ω—É–ª–∏ - –ø–æ–º–∏–º–æ data —Ç—É—Ç –±—É–¥–µ—Ç –∏ –∫—Ä—É—Ç–∏–ª–∫–∞ –∏ –æ—à–∏–±–∫–∞ –∏ —Ç–¥
 */
