import { useState } from 'react'
import { Link } from 'react-router-dom'

import { useCreateDeckMutation, useGetDecksQuery } from '@/entities/Decks/api/decks-api'
import { Button } from '@/shared/ui/button'
import { Table, TableBody, TableCell, TableHead, TableHeadCell, TableRow } from '@/shared/ui/table'
import { Typography } from '@/shared/ui/typography'
import { nanoid } from '@reduxjs/toolkit'

export const Decks = () => {
    const [currentPage, setCurrentPage] = useState(1)

    // —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤ result –ª–µ–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ
    // data: —ç—Ç–æ -- –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è –æ–Ω–∏ —Å–∞–º–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ä–µ–¥–∞–∫—Å –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–º –≤ –Ω–∞—à data –æ–±—ä–µ–∫—Ç
    // isLoading - –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö,
    // isFetching - –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ - isFetching -- –∫–æ–≥–¥–∞ –ø–æ —Ç—ç–≥–∞–º –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
    const { data, error, isLoading } = useGetDecksQuery({
        // –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø–µ—Ä–µ–¥–∞–µ–º –∏–∑ —Å—Ç–µ–π—Ç–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        currentPage: currentPage, // –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞
        itemsPerPage: 3, // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ - 4 –∫–æ–ª–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    })

    // console.log(data)

    const [createDeck, { data: newDeckData, isLoading: isCreateLoading }] = useCreateDeckMutation()

    console.log(newDeckData)

    if (isLoading || isCreateLoading) {
        return <Typography variant={'h1'}>Loading...</Typography>
    }

    if (error) {
        const err = error as any

        return <Typography variant={'h1'}>{err.data.message}</Typography>
    }

    const onCreateDeckClick = () => {
        createDeck({ name: 'title üëå' + nanoid() })
    }

    return (
        <div>
            {/* –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ To News - –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä. '/news' */}
            <Link to={'/news'}>To News</Link>
            <hr />
            <Button onClick={onCreateDeckClick}>Create Deck</Button>
            <Typography style={{ color: 'green' }} variant={'h2'}>
                Current page: {data?.pagination?.currentPage}
            </Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableHeadCell>Name</TableHeadCell>
                        <TableHeadCell>Cards</TableHeadCell>
                        <TableHeadCell>Last Updated</TableHeadCell>
                        <TableHeadCell>Created by</TableHeadCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {data?.items.map((deck) => {
                        return (
                            <TableRow key={deck.id}>
                                <TableCell>{deck?.name}</TableCell>
                                <TableCell>{deck?.cardsCount}</TableCell>
                                <TableCell>
                                    {new Date(deck?.updated).toLocaleDateString()}
                                </TableCell>
                                <TableCell>{deck?.author?.name}</TableCell>
                            </TableRow>
                        )
                    })}
                </TableBody>
            </Table>
            {createArray(1, data?.pagination?.totalPages ?? 0).map((i) => {
                return (
                    <Button key={i} onClick={() => setCurrentPage(i)}>
                        {i}
                    </Button>
                )
            })}
        </div>
    )
}

const createArray = (startNumber: number, length: number) => {
    return Array.from({ length }, (_, index) => startNumber + index)
}

/*
–ò—Ç–æ–≥: —Ä–∞–Ω—å—à–µ –º—ã –ø–∏—Å–∞–ª–∏ –≤ —Å–∞–Ω–∫–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –ª–æ–∂–∏–ª–∏ –µ–≥–æ –≤ —Å—Ç–µ–π—Ç —Å—Ç–µ–∏—Ç –º–µ–Ω—è–ª—Å—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å—Ç–µ–∏—Ç –¥–æ—Å—Ç–∞–≤–∞–ª–∏ –Ω–∞ UI –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
–¢–ï–ü–ï–†–¨: –Ω–∞–ø–∏—Å–∞–ª–∏ 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Ö—É–∫ –∏ –ø—Ä–æ—Å—Ç–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –µ–≥–æ –¥–µ—Ä–Ω—É–ª–∏ - –ø–æ–º–∏–º–æ data —Ç—É—Ç –±—É–¥–µ—Ç –∏ –∫—Ä—É—Ç–∏–ª–∫–∞ –∏ –æ—à–∏–±–∫–∞ –∏ —Ç–¥
 */
